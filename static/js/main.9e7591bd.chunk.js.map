{"version":3,"sources":["logo.svg","Characters.js","App.js","reportWebVitals.js","index.js"],"names":["CharacterList","console","log","useState","dataList","data","setData","nameList","names","setNames","changes","setChanges","removes","setRemoves","onSub","e","orig","meName","target","offsetParent","bgColor","length","newChange","changeString","prevChanges","newName","nameClone","sort","updateNames","changeMe","original","arrayCopy","map","row","char","meChar","removeRow","title","rowName","id","filter","prevRemoves","useName","name","replace","className","onClick","blob","Blob","join","type","element2","document","createElement","href","window","URL","createObjectURL","webkitURL","download","Date","toLocaleString","style","display","setAttribute","body","appendChild","click","element","key","delClick","useClick","onChange","namesList","HomePageHeader","Char","rel","NameForm","FreeSolo","setName","width","Autocomplete","freeSolo","autoSelect","options","value","newValue","onInputChange","renderInput","params","TextField","label","margin","variant","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9e7591bd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport \"./App.css\"\nimport  dataList  from './data/allChars.json'\nimport nameList from './data/names.json'\nimport { MdDeleteForever } from \"react-icons/md\"\nimport { useState} from 'react'\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\n\nexport const CharacterList = () => {\n  console.log(\"Running characterlist\")\n  const [data, setData] = useState(dataList);\n  const [names, setNames] = useState(nameList)\n  //window.localStorage.setItem('nameList', JSON.stringify(nameList));\n\n  const updateNames = (newName) => {\n    console.log(\"Updating names\")\n    console.log(newName)\n    let nameClone = [...names, newName].sort()\n    //window.localStorage.setItem('nameList', JSON.stringify(nameClone));\n    setNames(nameClone);\n    console.log(names);\n  }\n\n\n  //console.log( JSON.stringify(nameList))\n  const [changes, setChanges] = useState([]);\n  const [removes, setRemoves] = useState([]);\n\n  const addRemove = (newChange) => {\n    console.log(\"addRemove called\")\n    setRemoves(prevRemoves => [...prevRemoves, newChange])\n  }\n\n  const addChange = (newChange) => {\n    console.log(\"addChange called\")\n    console.log(newChange);\n    setChanges(prevChanges => [...prevChanges, newChange])\n    console.log(changes);\n  }\n\n  const onSub = (e, orig, meName) => {\n    console.log(\"Called onSub\");\n    e.target.offsetParent.bgColor=\"gray\";\n    if (!meName || !meName.length)\n      return;\n    const changeString = `${orig},${meName}`;\n    console.log(changeString);\n    addChange(changeString);\n\n    updateNames(meName);\n  }\n\n\n  const changeMe = (original, newName) => {\n    console.log(\"Called changeMe\")\n    console.log(\"Original character name\")\n    console.log(original);\n    const arrayCopy = data.map((row) => {\n      if (row.char === original) {\n        row.meChar = newName;\n      }\n      return (row);\n    })\n    setData(arrayCopy);\n    console.log(\"New array after change\")\n    console.log(data);\n    return(newName);\n  }\n\n\n  const removeRow = (e) => {\n    console.log(\"Called removeRow\")\n    if (e.target.title === \"delButton\") {\n      const rowName = e.target.id;\n      setData(data.filter((row) => row.char !== rowName));\n      addRemove(rowName);\n    }\n  };\n  const useName = (e) => {\n    console.log(\"Called useName\")\n    const name = e.target.id.replace(\"use_\", \"\");\n    console.log(name);\n    const arrayCopy = data.map((row) => {\n      if (row.char === name) {\n        row.meChar = row.char;\n      }\n      return (row);\n    })\n    setData(arrayCopy);\n    console.log(data);\n\n  };\n  return (\n      <>\n        <HomePageHeader/>\n        <button id=\"save-remove\" className={\"save-all\"}\n                onClick={() => {\n                  //Now save the removals\n                  if (removes && removes.length) {\n                    let blob = new Blob([removes.join('\\n')], {type: 'text/plain'})\n                    let element2 = document.createElement(\"a\");\n                    element2.href = (window.URL && window.URL.createObjectURL) ? window.URL.createObjectURL(blob) : window.webkitURL.createObjectURL(blob);\n                    element2.download = `removals ${Date().toLocaleString()}.txt`\n                    element2.style.display = 'none';\n                    if (typeof element2.download === 'undefined') {\n                      element2.setAttribute('target', '_blank');\n                    }\n                    document.body.appendChild(element2);\n                    element2.click();\n                  }\n\n\n                }}>\n          Save Removals to File\n        </button>\n        <button id=\"save-changes\" className={\"save-all\"}\n                onClick={() => {\n                  let blob = new Blob([changes.join('\\n')], {type: 'text/plain'})\n                  let element = document.createElement(\"a\");\n                  element.href = (window.URL && window.URL.createObjectURL) ? window.URL.createObjectURL(blob) : window.webkitURL.createObjectURL(blob);\n                  element.download = `changes ${Date().toLocaleString()}.txt`\n                  element.style.display = 'none';\n                  if (typeof element.download === 'undefined') {\n                    element.setAttribute('target', '_blank');\n                  }\n                  document.body.appendChild(element);\n                  element.click();\n                  }\n                }>\n          Save Changes to File\n        </button>\n        <div className=\"character-container\">\n          <table>\n            <tbody>\n            {data.map((data, key) => {\n              return (\n                  <Char\n                      key={key}\n                      char={data.char}\n                      meChar={data.meChar}\n                      delClick={removeRow}\n                      useClick={useName}\n                      onChange={changeMe}\n                      onSub={onSub}\n                      namesList={names}\n                  />\n              );\n            })}\n            </tbody>\n          </table>\n        </div>\n      </>\n  );\n};\n\nconst HomePageHeader = () => {\n  return (\n      <h2>Character list</h2>\n  );\n};\n\nconst Char = ({char, meChar, delClick, useClick, onChange, onSub, namesList}) => {\n  return (\n\n        <tr>\n          <td className={\"char\"}><p><button title=\"delButton\"\n                      id={char}\n              onClick={ delClick}>\n            <MdDeleteForever/>\n              </button>\n             <a\n                 href={\"https://lotr.fandom.com/wiki/Special:Search?query=\" + char}\n                 target=\"_blank\" rel=\"noreferrer noopener\">\n                 {char}</a></p>\n          </td>\n          <td className=\"transfer\"><button\n              title=\"useButton\"\n              id={\"use_\"+ char}\n              onClick={useClick}>\n            Use As Is</button>\n          </td>\n          <td className=\"me_char\">\n              <NameForm orig={char}\n                        meName={meChar}\n                        changeMe={onChange}\n                        namesList={namesList}/>\n          </td>\n          <td className=\"save\"><button\n              onClick={ e => {onSub(e, char, meChar);}}\n          >Save</button>\n          </td>\n        </tr>\n  );\n};\n\n\n\nexport function NameForm( {orig, meName, changeMe, namesList}) {\n\n  //if (name !== meName)\n  //  setName(meName);\n  return (\n      <div>\n        <FreeSolo orig={orig} meName={meName} changeMe={changeMe} namesList={namesList}/>\n        <a href={\"https://lotr.fandom.com/wiki/Special:Search?query=\" + meName}>\n          View</a>\n      </div>\n  )\n}\n\n\nexport default function FreeSolo({orig, meName, changeMe, namesList}) {\n\n  let [name, setName] = useState(orig);\n\n\n  //console.log(\"Free solog name state is \" + name);\n  return (\n      <div style={{ width: 300 }}>\n          <Autocomplete\n              id={`ac_${orig}`}\n              freeSolo\n              autoSelect\n              options={namesList}\n              value = {meName}\n              onChange = { (e, newValue) => {\n                setName(newValue);\n                changeMe(orig, newValue);\n              }\n              }\n              onInputChange={ (e, newValue) => {\n\n              }}\n              renderInput={params => (\n                  <TextField\n                      {...params}\n                      id={orig}\n                      label=\"\"\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                     // onChange={(e) => {\n                     //   console.log(\"Change Event Fired\");\n                     //  setName(changeMe(e));\n                     // onChange = { (e) =>handleChange(e)}\n                  />\n              )\n              }\n          />\n      </div>\n  );\n\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport  data  from './data/charList.json'\nimport { CharacterList } from \"./Characters\"\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <CharacterList />\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}